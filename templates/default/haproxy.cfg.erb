# This file is maintained by chef

<%
  class ::Chef::Mixin::Template::TemplateContext
    include ::EtHaproxy::Helpers
  end
-%>

global
  log <%= node['haproxy']['syslog']['dest'] %> <%= node['haproxy']['syslog']['facility'] %>
  maxconn <%= node['haproxy']['global']['maxconn'] %>
  #debug
  #quiet
  user haproxy
  group haproxy
  stats socket <%= node['haproxy']['global']['socket_file'] %> user <%= node['haproxy']['global']['admin_user'] %> mode 0660 level <%= node['haproxy']['global']['admin_level'] %>

defaults
  log     global
  mode    http
  option  httplog
  option httpclose
  option  dontlognull
  option  redispatch
  retries 3
  timeout connect <%= node['haproxy']['defaults']['timeout']['connect'] %>
  timeout client <%= node['haproxy']['defaults']['timeout']['client'] %>
  timeout server <%= node['haproxy']['defaults']['timeout']['server'] %>
  maxconn <%= node['haproxy']['defaults']['maxconn'] %>
  <% if node["haproxy"]["x_forwarded_for"] -%>
  option httpclose
  option forwardfor
  <% end -%>


listen stats :<%= node['haproxy']['stats']['port'] %>
  stats enable
  stats uri <%= node['haproxy']['stats']['uri'] %>
  stats auth <%= node['haproxy']['stats']['admin_user'] %>:<%= node['haproxy']['stats']['admin_password'] %>
  monitor-uri <%= node['haproxy']['monitor_uri'] %>

<%
  node['haproxy']['frontends'].each do |fe_name,fe_conf|
-%>

frontend <%= fe_name %>
  <%
    fe_conf['ports'].each do |bind_port| -%>
  bind :<%= bind_port %>
  <%
    end

    if fe_conf['vpn'] == true
  -%>
  # VPN ENDPOINT
  <%

      node['haproxy']['acls'].select do |acl,acl_conf|
        acl_conf['type'] == 'hdr_beg(host)'
      end.each do |acl,acl_conf|
      -%>
      acl <%= acl %> <%= acl_conf['type'] %> <%= acl_conf['match'].split('.').first %>
      redirect prefix http://<%= acl_conf['match'].split('.').first %>:<%= fe_conf['redirect_port'] %> if <%= acl %>
      <%
      end

    else

      unless fe_conf["disable_x_forwarded_for"]
  -%>
  option forwardfor if-none
  capture request header X-Forwarded-For len 51
  <%
      end # unless fe_conf["disable_x_forwarded_for"]
  -%>

  #
  # Endpoint acl definitions
  #

  # Access Control acls
  <%
        max_line_length = 60
        node['haproxy']['access_control']['sets'].each do |ac_set|
          @trusted_ips[ac_set].each_slice(max_line_length).each do |ip_slice|
  -%>
  acl src_access_control_set_<%= ac_set %> hdr_ip(X-Forwarded-For) <%= ip_slice.join(" ") %>
  <%
          end
        end # node['haproxy']['access_control']['sets'].each do |ac_set|

        node['haproxy']['access_control']['sets'].each do |ac_set|
          @trusted_networks[ac_set].each_slice(max_line_length).each do |ip_slice|
  -%>
  acl src_access_control_set_<%= ac_set %> src <%= ip_slice.join(" ") %>
  <%
          end
        end # node['haproxy']['access_control']['sets'].each do |ac_set|
  -%>
  acl src_access_control_eips hdr_ip(X-Forwarded-For) <%= @eips.sort.join(" ") %>
  acl src_access_control_instance_ext_ips hdr_ip(X-Forwarded-For) <%= @instance_ext_ips.join(" ") %>

  # Statically defined acls
  <%

        if node['haproxy']["acls"]
          node['haproxy']["acls"].each do |acl_name,acl_conf|
  -%>
  acl <%= acl_name %> <%= acl_conf['type'] %><% unless acl_conf['case_sensitive'] %> -i<% end %> <%= acl_conf['match'].split('.').first + ' ' if acl_conf['type'] =~ /hdr_.*(host)/ %><%= acl_conf['match'] %>
  <%
          end # node['haproxy']["acls"].each
        end # if node['haproxy']["acls"]
  -%>

  # host-only endpoint acl definitions
  <%
        node["haproxy"]["applications"].select {|app,app_conf|
          app_conf["endpoint"]
        }.each do |app,app_conf|
  -%>
  acl host_endpoint_<%= app %> hdr_beg(host) -i <%= app_conf['endpoint'].split('.').first %> <%= app_conf['endpoint'] %>
  <%
        end
  -%>

  # Block rules
  <%
        node['haproxy']['applications'].select { |app,app_conf|
          app_conf["access_control"]
        }.each do |app,app_conf|
          if app_conf["allowed"]
            app_conf['acls'].each do |app_acls|
              app_acls_w_blocks = app_acls + app_conf['allowed']['host_groups'].map {|hg| "!src_access_control_#{hg}" }
  -%>
  block if <%= app_acls_w_blocks.join(' ') %>
  <%
            end
          else
            Chef::Log.warn("Application #{app} has access_control: true but" +
              " does not have an allow list")
          end
        end

        unless fe_conf['ssl']
  -%>

  errorfile 403 /etc/haproxy/custom-errorfiles/403.http

  #
  # Forced SSL redirects (if any) or blocks (if SSL redirect is disabled)
  #
  <%
          gen_ssl_redirects(
              node['haproxy']['applications'],
              node['haproxy']['acls']
            ).each do |ssl_redirect_line|
  -%>
  <%= ssl_redirect_line %>
  <%
          end # ssl_redirects_line.each

        else # unless fe_conf['ssl']
  -%>
  # This makes sure everything passed through this frontend leaves
  # with exactly one X-Forwarded-Proto header indicating, in this
  # case, "https".
  reqidel ^X-Forwarded-Proto:.*
  reqadd   X-Forwarded-Proto:\ https

  <%
        end # fe_conf["ssl"]
  -%>

  #
  # routing rules (if any)
  #
  <%
        node['haproxy']['applications'].each do |app,app_conf|
          if ( fe_conf['ssl'] && app_conf['ssl_enabled'] ) ||
            ( ! fe_conf['ssl'] && ! app_conf['ssl_required'] )
            if app_conf['backend']
  -%>
  use_backend <%= app_conf['backend'] %> if <%= string_acls(app_conf["acls"]) %><% if app_conf["endpoint"] %> or host_endpoint_<%= app %><% end %>
  <%
            elsif app_conf['redirect']
  -%>
  redirect <%= app_conf['redirect']['type'] %> <%= app_conf['redirect']['destination'] %> code <%= app_conf['redirect']['code'] %> if <%= string_acls(app_conf['acls']) %>
  <%
            end
          end # ( fe_conf['ssl'] && app_conf['ssl_enabled'] ) ||
         # ( ! fe_conf['ssl'] && ! app_conf['ssl_required'] )

        end # node['haproxy']['applications'].each

      end # if fe_conf['vpn']

    end # node['haproxy']['frontends'].each
  -%>

<%

  # Only bother loading the node search if we are actually using it
  # somewhere in the attributes.

  unless node['haproxy']['backends'].select{|b,b_c| b_c["servers_recipe"]} == {}
    @recipe_servers = nodes_for_recipes(
        node.chef_environment,
        node['haproxy']['backends']
      )
  end

  node['haproxy']['backends'].each do |be_name,be_conf|
    backend_clause(be_name,be_conf).each do |line|
-%>
<%= line %>
<%
    end
-%>

<%
  end # node['haproxy']['backends'].each
-%>
