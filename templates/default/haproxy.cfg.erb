# This file is maintained by chef

global
  log <%= node['haproxy']['syslog']['dest'] %> <%= node['haproxy']['syslog']['facility'] %>
  maxconn <%= node['haproxy']['global']['maxconn'] %>
  #debug
  #quiet
  user haproxy
  group haproxy
  stats socket <%= node['haproxy']['global']['socket_file'] %> user <%= node['haproxy']['global']['admin_user'] %> mode 0660 level <%= node['haproxy']['global']['admin_level'] %>

defaults
  log     global
  mode    http
  option  httplog
  option httpclose
  option  dontlognull
  option  redispatch
  retries 3
  timeout connect <%= node['haproxy']['defaults']['timeout']['connect'] %>
  timeout client <%= node['haproxy']['defaults']['timeout']['client'] %>
  timeout server <%= node['haproxy']['defaults']['timeout']['server'] %>
  maxconn <%= node['haproxy']['defaults']['maxconn'] %>
  <% if node["haproxy"]["x_forwarded_for"] -%>
  option httpclose
  option forwardfor
  <% end -%>


listen stats :<%= node['haproxy']['stats']['port'] %>
  stats enable
  stats uri <%= node['haproxy']['stats']['uri'] %>
  stats auth <%= node['haproxy']['stats']['admin_user'] %>:<%= node['haproxy']['stats']['admin_password'] %>
  monitor-uri <%= node['haproxy']['monitor_uri'] %>

<%
  node['haproxy']['frontends'].each do |fe_name,fe_conf|
-%>

frontend <%= fe_name %> :<%= fe_conf['port'] %>
  <%
    unless fe_conf["disable_x_forwarded_for"]
  -%>
  option forwardfor if-none
  capture request header X-Forwarded-For len 51
  <%
    end # unless fe_conf["disable_x_forwarded_for"]
  -%>

  #
  # Endpoint acl definitions
  #

  # Access Control acls
  <%
      node['haproxy']['access_control']['sets'].each do |ac_set|
  -%>
  acl src_access_control_set_<%= ac_set %> hdr_ip(X-Forwarded-For) <%= @trusted_ips[ac_set].join(" ") %>
  <%
      end # node['haproxy']['access_control']['sets'].each do |ac_set|
  -%>
  acl src_access_control_eips hdr_ip(X-Forwarded-For) <%= @eips.join(" ") %>
  acl src_access_control_instance_ext_ips hdr_ip(X-Forwarded-For) <%= @instance_ext_ips.join(" ") %>

  # Statically defined acls
  <%

      if node['haproxy']["acls"]
        node['haproxy']["acls"].each do |acl_name,acl_conf|
  -%>
  acl <%= acl_name %> <%= acl_conf['type'] %><% unless acl_conf['case_sensitive'] %> -i<% end %> <%= acl_conf['match'] %>
  <%
        end # node['haproxy']["acls"].each
      end # if node['haproxy']["acls"]
  -%>
  # host-only endpoint acl definitions
  <%
      node["haproxy"]["applications"].select {|app,app_conf|
        app_conf["endpoint"]
      }.each do |app,app_conf|
  -%>
  acl host_endpoint_<%= app %> hdr_beg(host) -i <%= app_conf["endpoint"] %>
  <%
      end
  -%>

  # Block rules
  <%
      node['haproxy']['applications'].select { |app,app_conf|
        app_conf["access_control"] && app_conf["allowed"]
      }.each do |app,app_conf|

        app_conf['acls'].each do |app_acls|
          app_acls_w_blocks = app_acls + app_conf['allowed']['host_groups'].map {|hg| "!src_access_control_#{hg}" }
  -%>
  block if <%= app_acls_w_blocks.join(' ') %>
  <%
        end
      end
  -%>

  <%
      unless fe_conf['ssl']
  -%>
  #
  # Forced SSL redirects (if any) or blocks (if SSL redirect is disabled)
  #
  <%
        Chef::Recipe::EtHaproxy::gen_ssl_redirects(
            node['haproxy']['applications'],
            node['haproxy']['acls']
          ).each do |ssl_redirect|
  -%>
  <% if ssl_redirect['redirect_permitted'] == true
  %>redirect prefix https://<%= ssl_redirect['fqdn'] %><%
     else
  %>block<%
     end
  %> if <%= ssl_redirect['acls'].map{|a| a.join(' ') }.join(' or ') %>
  <%
        end # ssl_redirects.uniq.each

      else # unless fe_conf['ssl']
  -%>
  # This makes sure everything passed through this frontend leaves
  # with exactly one X-Forwarded-Proto header indicating, in this
  # case, "https".
  reqidel ^X-Forwarded-Proto:.*
  reqadd   X-Forwarded-Proto:\ https

  <%
      end # fe_conf["ssl"]
  -%>

  #
  # use_backend rules (if any)
  #
  <%
      node['haproxy']['applications'].each do |app,app_conf|
        if ( fe_conf['ssl'] && app_conf['ssl_enabled'] ) ||
          ( ! fe_conf['ssl'] && ! app_conf['ssl_required'] )
  -%>
  use_backend <%= app_conf['backend'] %> if <%= app_conf["acls"].map{|a| a.join(' ') }.join(' or ') %><% if app_conf["endpoint"] %> or host_endpoint_<%= app %><% end %>
  <%
        end # ( fe_conf['ssl'] && app_conf['ssl_enabled'] ) ||
       # ( ! fe_conf['ssl'] && ! app_conf['ssl_required'] )

      end # node['haproxy']['applications'].each

    end # node['haproxy']['frontends'].each
  -%>

<%

  # Only bother loading the node search if we are actually using it
  # somewhere in the attributes.

  unless node['haproxy']['backends'].select{|b,b_c| b_c["servers_recipe"]} == {}
    recipe_servers = Chef::Recipe::EtHaproxy::nodes_for_recipes(
        node.chef_environment,
        node['haproxy']['backends']
      )
  end

  node['haproxy']['backends'].each do |be_name,be_conf|
-%>

backend <%= be_name %>
  <%
    unless be_conf['mode'] && be_conf['mode'] == "tcp"
      if be_conf["cookie_prefix"]
  -%>
  cookie <%= be_conf["cookie_prefix"] %> prefix
  <%
      end # if be_conf["cookie_prefix"]
      if be_conf["cookie_insert"]
  -%>
  cookie <%= be_conf["cookie_insert"] %> insert indirect
  <%
      end # if be_conf["cookie_insert"]
      if be_conf['check_req'] &&
        be_conf['check_req']['method']
  -%>
  option httpchk <%= be_conf['check_req']['method'] %><% if be_conf['check_req']['url'] %> <%= be_conf['check_req']['url'] %><% end %>
  <%
      end # if be_conf['check_req']
    end # unless be_conf['mode'] && be_conf['mode'] == "tcp"
  -%>
  <%
    # List servers the old fashioned way (by individually defined server lines)
    if be_conf['servers']
      be_conf['servers'].each do |server|
  -%>
  server <%= server['name'] %> <%= server['fqdn'] %>:<%= server['port'] %><% if be_conf['check_req'] && be_conf['check_req']['always'] || be_conf['servers'].count > 1 %> check<% end %><% if server["options"] %> <%= server['options'].join(' ') %><% end %>
  <%
      end # be_conf['servers'].each
    end # if be_conf['servers']

    if be_conf['servers_recipe']
      raise "In order to use the servers_recipe clause, you also need " +
        "to define 'port' for the entire backend." unless be_conf["port"]
      unless recipe_servers[be_conf['servers_recipe']] &&
        recipe_servers[be_conf['servers_recipe']] != []
        Chef::Log.warn "Recipe #{be_conf['servers_recipe']} does not " +
          "appear to have any associated servers"
      else # unless recipe_servers[be_conf['servers_recipe']]
        cluster_servers = recipe_servers[be_conf['servers_recipe']]
        cluster_servers.each do |server|
  -%>
  server <%= server.name %> <%= server['ipaddress'] %>:<%= be_conf['port'] %><% if be_conf['check_req'] && be_conf['check_req']['always'] || cluster_servers.count > 1 %> check<% end %><% if be_conf["server_options"] %> <%= be_conf['server_options'].join(' ') %><% end %>
  <%
        end # recipe_ips[be_conf['servers_recipe']].each
      end # unless recipe_servers[be_conf['servers_recipe']]
    end # if be_conf['servers_recipe']
  -%>
<%
  end # node['haproxy']['backends'].each
-%>
