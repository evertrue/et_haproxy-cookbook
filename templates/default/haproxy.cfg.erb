# This file is maintained by chef

global
  log <%= node['haproxy']['syslog']['dest'] %> <%= node['haproxy']['syslog']['facility'] %>
  maxconn <%= node['haproxy']['global']['maxconn'] %>
  #debug
  #quiet
  user haproxy
  group haproxy
  stats socket <%= node['haproxy']['global']['socket_file'] %> user <%= node['haproxy']['global']['admin_user'] %> mode 0660 level <%= node['haproxy']['global']['admin_level'] %>

defaults
  log     global
  mode    http
  option  httplog
  option httpclose
  option  dontlognull
  option  redispatch
  retries 3
  timeout connect <%= node['haproxy']['defaults']['timeout']['connect'] %>
  timeout client <%= node['haproxy']['defaults']['timeout']['client'] %>
  timeout server <%= node['haproxy']['defaults']['timeout']['server'] %>
  maxconn <%= node['haproxy']['defaults']['maxconn'] %>
  <% if node['haproxy']['x_forwarded_for'] -%>
  option httpclose
  option forwardfor
  <% end -%>

listen stats :<%= node['haproxy']['stats']['port'] %>
  stats enable
  stats uri <%= node['haproxy']['stats']['uri'] %>
  stats auth <%= node['haproxy']['stats']['admin_user'] %>:<%= node['haproxy']['stats']['admin_password'] %>
  monitor-uri <%= node['haproxy']['monitor_uri'] %>
<%
  haproxy_conf = EtHaproxy::Conf.new(node['haproxy'], node.chef_environment)
  haproxy_conf.frontends.each do |fe|
-%>

frontend <%= fe.name %>
  <%
    fe.ports.each do |bind_port|
  -%>
  bind :<%= bind_port %>
  <%
    end # fe.ports.each do |bind_port|

    if fe.vpn?
  -%>
  #
  # vpn endpoint
  #
  <%
      haproxy_conf.vpn_rules(fe.redirect_port).each do |rule|
  -%>
  <%= rule %>
  <%
      end # haproxy_conf.vpn_rules(fe.redirect_port).each do |rule|
    else # if fe.vpn?
      unless fe.conf['disable_x_forwarded_for']
  -%>
  option forwardfor if-none
  capture request header X-Forwarded-For len 51
  <%
      end # unless fe_conf["disable_x_forwarded_for"]
  -%>

  #
  # Access Control acls
  #
  <%
      max_line_length = 60
      node['haproxy']['access_control']['sets'].each do |ac_set|
        @trusted_ips[ac_set].each_slice(max_line_length).each do |ip_slice|
  -%>
  acl src_access_control_set_<%= ac_set %> hdr_ip(X-Forwarded-For) <%= ip_slice.join(" ") %>
  <%
        end # @trusted_ips[ac_set].each_slice(max_line_length).each do |ip_slice|
      end # node['haproxy']['access_control']['sets'].each do |ac_set|

      node['haproxy']['access_control']['sets'].each do |ac_set|
        @trusted_networks[ac_set].each_slice(max_line_length).each do |ip_slice|
  -%>
  acl src_access_control_set_<%= ac_set %> src <%= ip_slice.join(' ') %>
  <%
        end # @trusted_networks[ac_set].each_slice(max_line_length).each do |ip_slice|
      end # node['haproxy']['access_control']['sets'].each do |ac_set|
  -%>
  acl src_access_control_eips hdr_ip(X-Forwarded-For) <%= @eips.sort.join(' ') %>
  acl src_access_control_instance_ext_ips hdr_ip(X-Forwarded-For) <%= @instance_ext_ips.join(' ') %>

  #
  # Routing acls
  #
  <%

      haproxy_conf.acls.each do |acl|
  -%>
  <%= acl.conf_line %>
  <%
      end # haproxy_conf.acls.each do |acl|
      haproxy_conf.auto_cluster_acls.each do |acl|
  %>
  <%= acl.conf_line %>
  <%
      end # haproxy_conf.auto_cluster_acls.each do |acl|
      haproxy_conf.endpoint_only_acls.each do |line|
  -%>
  <%= line %>
  <%
      end # haproxy_conf.endpoint_only_acls.each do |line|

      unless fe.ssl?
  -%>

  errorfile 403 /etc/haproxy/custom-errorfiles/403.http

  <%
      end # unless fe.ssl?
  -%>
  #
  # routing rules (if any)
  #
  <%
      fe.routing_rule_lines('block').each do |rule|
  -%>
  <%= rule %>
  <%
      end # fe.routing_rule_lines('block').each do |rule|
      if fe.ssl?
  %>

  # This makes sure everything passed through this frontend leaves
  # with exactly one X-Forwarded-Proto header indicating, in this
  # case, "https".
  reqidel ^X-Forwarded-Proto:.*
  reqadd   X-Forwarded-Proto:\ https

  <%
      end # if fe.ssl?
      %w(redirect use_backend).each do |rule_type|
        fe.routing_rule_lines(rule_type).each do |rule|
  -%>
  <%= rule %>
  <%
        end # fe.routing_rule_lines(rule_type).each do |rule|
      end # %w(redirect use_backend).each do |rule_type|
    end # if fe.vpn?
  end # haproxy_conf.frontends.each do |fe|
  -%>

  #
  # backend rules
  #
<%
  haproxy_conf.backends.each do |backend|
-%>

<%
    backend.clause.each do |line|
-%>
<%= line %>
<%
    end # backend.clause.each do |line|
  end # haproxy_conf.backends.each do |backend|
-%>
