# This file is maintained by chef

global
        log <%= node['haproxy']['syslog']['dest'] %> <%= node['haproxy']['syslog']['facility'] %>
        maxconn <%= node['haproxy']['global']['maxconn'] %>
        #debug
        #quiet
        user haproxy
        group haproxy

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        option  redispatch
        retries 3
        timeout connect <%= node['haproxy']['defaults']['timeout']['connect'] %>
        timeout client <%= node['haproxy']['defaults']['timeout']['client'] %>
        timeout server <%= node['haproxy']['defaults']['timeout']['server'] %>
        maxconn <%= node['haproxy']['defaults']['maxconn'] %>
        <% if node["haproxy"]["x_forwarded_for"] -%>
        option httpclose
        option forwardfor
        <% end -%>


listen stats :<%= node['haproxy']['stats']['port'] %>
  stats enable
  stats uri <%= node['haproxy']['stats']['uri'] %>
  stats auth <%= node['haproxy']['stats']['admin_user'] %>:<%= node['haproxy']['stats']['admin_password'] %>
  monitor-uri <%= node['haproxy']['monitor_uri'] %>
<% node['haproxy']['frontends'].each do |fe_name,fe_conf| -%>

frontend <%= fe_name %> :<%= fe_conf['port'] %>
  option httplog
  <% if fe_conf["x_forwarded_for"] -%>
  option httpclose
  option forwardfor if-none
  capture request header X-Forwarded-For len 51
  <% end -%>

  # Endpoint acl definitions
  <% fe_conf['applications'].each do |app| -%>
  acl host_<%= app %> hdr_beg(host) -i <%= node['haproxy']['applications'][app]['endpoint'] %>
  <% end -%>

  <% unless fe_conf['ssl'] -%>
  # Forced SSL redirects
  <% fe_conf['applications'].each do |app| -%>
  <% if node['haproxy']['applications'][app]['ssl_required'] -%>
  redirect prefix https://<%= node['haproxy']['applications'][app]['endpoint'] %> if host_<%= app %>
  <% end # if ssl_required -%>
  <% end # .each -%>

  <% end # unless -%>
  <% if fe_conf["ssl"] -%>
  # This makes sure everything passed through this frontend leaves 
  # with exactly one X-Forwarded-Proto header indicating, in this
  # case, "https".
  reqidel ^X-Forwarded-Proto:.*
  reqadd   X-Forwarded-Proto:\ https

  <% end -%>
  # use_backend rules
  <% fe_conf['applications'].each do |app| -%>
  <% if ( fe_conf['ssl'] && node['haproxy']['applications'][app]['ssl_enabled'] ) || ( ! fe_conf['ssl'] && ! node['haproxy']['applications'][app]['ssl_required'] ) -%>
  use_backend <%= node['haproxy']['applications'][app]['backend'] %> if host_<%= app %>
  <% end -%>
  <% end -%>
<% end -%>
<% node['haproxy']['backends'].each do |be_name,be_conf| -%>

backend <%= be_name %>
  <% unless be_conf['mode'] && be_conf['mode'] == "tcp" -%>
  option httplog
  option httpclose
  <% if be_conf["cookie_prefix"] -%>
  cookie <%= be_conf["cookie_prefix"] %> prefix
  <% end -%>
  <% if be_conf["cookie_insert"] -%>
  cookie <%= be_conf["cookie_insert"] %> insert indirect
  <% end -%>
  <% end -%>
  <% if be_conf['check_req'] -%>
  option httpchk <%= be_conf['check_req']['method'] %> <%= be_conf['check_req']['url'] %>
  <% end -%>
  <% be_conf['servers'].each do |server| -%>
  server <%= server['name'] %> <%= server['fqdn'] %>:<%= server['port'] %><% if be_conf['check_req'] %> check<% end %> <%= server['options'].join(' ') %> 
  <% end -%>
<% end -%>
